OpMode = A program for our robot.

OpModes are required to have 2 method:

init() - runs once when driver presses INIT
loop() - run repeatedly after driver presses PLAY but before STOP

Additionally:

init_loop() - runs repeatedly after driver presses INIT but before PLAY
start() - runs once when the driver presses PLAY
stop() - runs once when the driver presses STOP

@TeleOp Critical - This ensures this will show on the driver station as an OpMode
Any line that start with @ is called an notation
You can choose from @TeleOp() or @Autonomous()
You can give OpMode a name and group otherwise it just uses class name
@Disabled means code will compile but not show up as an OpMode

GAMEPAD AND BASIC MATHS

Buttons on the gamePad are all boolean (pressed/not pressed)
The d-pad is exposed as four buttons
the joysticks have values between 0 and 1 (not pressed / fully pressed)

You have to pressed the "Start" and "A" simultaneously on a gamepad to recognize gamepad 1
and "Start" and "A" simultaneously on a gamepad to recognize gamepad 2
Once the gamepad has been recognized the gamepad icon in the upper right corner of the DS
will be illuminated

private = Can only be seen in the class
default = only that class and other classes in the same package can see them
protected = can only be seen in class, child classes and in the same package
public = It can be seen anywhere

A circle in radians = 2 PI

As a best practice in FTC, your init() method should set things back to their expected default state

Motor RunMode:
RUN_TO_POSITION - The motor is to attempt to rotate in whatever direction is necessary to cause the
                  encoder reading to advance or retreat from its current setting to the setting
                  that has been provided through the setTargetPosition method.

RUN_USING_ENCODER - The motor is to do its best to run at targeted velocity

RUN_WITHOUT_ENCODER - The motor is to run at whatever velocity is achieved by applying a particular
                      power level to the motor

STOP_AND_RESET_ENCODER - The motor is to set the current encoder position to zero